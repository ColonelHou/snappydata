hydra.Prms-testRequirement = "Test to verify cluster recovery when a new server node is added in the existing cluster.";
hydra.Prms-testDescription = "The test starts a cluster ,populates data ,after which data count is taken for later validation,then in the running cluster a new node is added,
 then rebalance procedure is called and issues  abrupt server kill commands in middle of rebalance.After that cluster is restarted and data validation is done. ";

INCLUDE $JTESTS/io/snappydata/hydra/security/startSnappyCluster.conf;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
            io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = createFewTables.sql
            io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${dataFilesLocation}
            threadGroups = snappyThreads;

// Store data count of all the tables loaded.
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = storeDataCount
            threadGroups = snappyThreads;

INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = validateDataCount
            threadGroups = snappyThreads;

//Add a new server node
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = addNewNode
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeConfig="localhost "
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = servers
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isNewNodeFirst = false
            threadGroups = snappyInitThread;

INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = validateDataCount
            threadGroups = snappyThreads;

// trigger rebalance
TASK       taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = performRebalance
           threadGroups = snappyStoreThreads
           maxTimesToRun = 1
           maxThreads = 1;

//Issue mean kill
TASK       taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = meanKillProcesses
           threadGroups = leadThreads
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = servers
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
           maxTimesToRun = 1
           maxThreads = 1;

TASK       taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_runIngestionApp
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-threadCnt = 1
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-initStartRange = 1000001
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-initEndRange = 1000200
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${insertQueryPath1}
           threadGroups = snappyThreads
           maxTimesToRun = 1
           maxThreads = 1;

CLOSETASK  taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = storeDataCount
           threadGroups = snappyThreads;

//restart the cluster.
CLOSETASK  taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = clusterRestart
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = allNodes
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isStopStartCluster=false
           threadGroups = snappyThreads;

CLOSETASK   taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = validateDataCount
            threadGroups = snappyThreads;

io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;

//INCLUDE $JTESTS/io/snappydata/hydra/security/stopSnappyCluster.conf;