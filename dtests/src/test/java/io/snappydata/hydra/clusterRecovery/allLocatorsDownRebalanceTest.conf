hydra.Prms-testRequirement = "Test to verify cluster recovery when a new server node is added the existing cluster.";
hydra.Prms-testDescription = "The test starts a cluster ,populates data ,after which data count is taken for later validation,then all the locators are shut down ,
then in the running cluster try adding a new node which fails as expected,then kill a server node,restart the cluster.
 then rebalance procedure is called and issues  abrupt server kill commands in middle of rebalance.After that cluster is restarted and data validation is done. ";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_1.inc;

//threadGroups
INCLUDE $JTESTS/io/snappydata/hydra/cdcConnector/threadGroups.inc;

//Initial threadGroups
INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = initSnappyArtifacts
            runMode = always
            threadGroups = snappyThreads,snappyInitThread,snappyTaskThread1,snappyTaskThread2,snappyTaskThread3,snappyTaskThread4,snappyTaskThread5,snappyHAThread;


INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
            io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = createFewTables.sql
            io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${dataFilesLocation}
            threadGroups = snappyThreads;

//Do Validation take data count of all the tables .
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = storeDataCount
            threadGroups = snappyThreads;

//get all locators down :
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = performHA
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeConfig=" "
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = locators
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isOnlyStop = true
            threadGroups = snappyThreads;

//Add a new server node(GemFireConfigException expected)
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = addNewNode
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeConfig=" "
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = servers
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isNewNodeFirst = false
            threadGroups = snappyInitThread;

//Restart the cluster
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_clusterRestart
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = allNodes
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isStopStartCluster=false
            threadGroups = snappyThreads;

//Issue rebalance
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = performRebalance
            threadGroups = snappyInitThread;

INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = validateDataCount
            threadGroups = snappyInitThread;


io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;

io.snappydata.hydra.cluster.SnappyPrms-isLongRunningTest = true;
